<?xml version="1.0" encoding="UTF-8"?>
<fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format"
         xmlns:fox="http://xmlgraphics.apache.org/fop/extensions">

    <!-- Seitenlayout -->
    <fo:layout-master-set>
        <fo:simple-page-master master-name="main"
                               page-height="29.7cm" page-width="21cm"
                               margin-top="2.5cm" margin-bottom="2.5cm"
                               margin-left="2cm" margin-right="2cm">
            <fo:region-body margin-top="3cm" margin-bottom="2cm"/>
            <fo:region-before extent="2.5cm"/>
            <fo:region-after extent="1.5cm"/>
        </fo:simple-page-master>
    </fo:layout-master-set>

    <!-- PDF/UA Metadaten -->
    <fo:declarations>
        <x:xmpmeta xmlns:x="adobe:ns:meta/">
            <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
                <rdf:Description rdf:about="" 
                    xmlns:dc="http://purl.org/dc/elements/1.1/"
                    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
                    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
                    xmlns:pdfuaid="http://www.aiim.org/pdfua/ns/id/">
                    <dc:title>Benutzerübersicht</dc:title>
                    <dc:creator>PDF-Utilities System</dc:creator>
                    <dc:description>Tabellarische Übersicht aller registrierten Benutzer</dc:description>
                    <dc:language>de-DE</dc:language>
                    <xmp:CreatorTool>Apache FOP mit PDF/UA-1</xmp:CreatorTool>
                    <pdf:Producer>Apache FOP</pdf:Producer>
                    <pdfuaid:part>1</pdfuaid:part>
                </rdf:Description>
            </rdf:RDF>
        </x:xmpmeta>
    </fo:declarations>

    <!-- Seitensequenz -->
    <fo:page-sequence master-reference="main" language="de-DE">
        
        <!-- Kopfzeile -->
        <fo:static-content flow-name="xsl-region-before">
            <fo:block text-align="center" 
                font-family="Montserrat"
                font-size="20pt"
                color="#1a365d" 
                border-bottom="3pt solid #3182ce"
                padding-bottom="12pt"
                margin-bottom="8pt"
                role="H1">
                <fo:inline role="H1">Benutzerverzeichnis</fo:inline>
            </fo:block>
            
            <fo:block text-align="center" 
                font-family="Montserrat"
                font-size="11pt" color="#4a5568"
                role="P">
                <fo:inline role="P">Vollständige Übersicht aller registrierten Benutzer</fo:inline>
            </fo:block>
        </fo:static-content>

        <!-- Fußzeile -->
        <fo:static-content flow-name="xsl-region-after">
            <fo:block text-align="center" 
                font-family="Montserrat"
                font-size="9pt" color="#718096"
                border-top="1pt solid #e2e8f0"
                padding-top="8pt"
                role="artifact">
                Seite <fo:page-number/> | Erstellt am: <fo:inline font-family="Montserrat">26.09.2025</fo:inline>
            </fo:block>
        </fo:static-content>

        <!-- Hauptinhalt -->
        <fo:flow flow-name="xsl-region-body">
            <fo:block role="Document">
                
                <!-- Einführungstext -->
                <fo:block margin-bottom="25pt" 
                    font-family="Montserrat"
                    font-size="11pt" line-height="1.4"
                    text-align="justify"
                    role="P">
                    <fo:inline role="P">
                        Die nachfolgende Tabelle zeigt eine Übersicht aller im System registrierten 
                        Benutzer mit ihren grundlegenden Kontaktinformationen. Jeder Datensatz 
                        enthält Vorname, Nachname und die zugehörige E-Mail-Adresse. 
                        Aktuell sind 3 Benutzer im System erfasst.
                    </fo:inline>
                </fo:block>

                <!-- Haupttabelle -->
                <fo:table table-layout="fixed" width="100%" 
                    font-family="Montserrat"
                    border-collapse="separate" border-separation="0pt"
                    role="Table"
                    fox:alt-text="Benutzertabelle mit drei Spalten: Vorname, Nachname und E-Mail-Adresse für drei Benutzer">
                    
                    <!-- Spaltenbreiten -->
                    <fo:table-column column-width="20%"/>
                    <fo:table-column column-width="25%"/>
                    <fo:table-column column-width="55%"/>

                    <!-- Tabellenkopf -->
                    <fo:table-header role="THead">
                        <fo:table-row role="TR" height="45pt">
                            <fo:table-cell border="2pt solid #2d3748" 
                                padding="12pt 8pt" 
                                background-color="#4299e1"
                                display-align="center"
                                role="TH">
                                <fo:block font-family="Montserrat"
                                    font-size="12pt"
                                    color="white" 
                                    text-align="center"
                                    role="TH">
                                    <fo:inline role="TH">Vorname</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="2pt solid #2d3748" 
                                padding="12pt 8pt" 
                                background-color="#4299e1"
                                display-align="center"
                                role="TH">
                                <fo:block font-family="Montserrat"
                                    font-size="12pt"
                                    color="white" 
                                    text-align="center"
                                    role="TH">
                                    <fo:inline role="TH">Nachname</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="2pt solid #2d3748" 
                                padding="12pt 8pt" 
                                background-color="#4299e1"
                                display-align="center"
                                role="TH">
                                <fo:block font-family="Montserrat"
                                    font-size="12pt"
                                    color="white" 
                                    text-align="center"
                                    role="TH">
                                    <fo:inline role="TH">E-Mail-Adresse</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                        </fo:table-row>
                    </fo:table-header>

                    <!-- Tabellenkörper -->
                    <fo:table-body role="TBody">
                        
                        <!-- Benutzer 1: Kevin Smith -->
                        <fo:table-row role="TR" height="40pt">
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">Kevin</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">Smith</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    color="#3182ce"
                                    role="TD">
                                    <fo:inline role="TD">k.smith@foo.com</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                        </fo:table-row>

                        <!-- Benutzer 2: Peter Jones -->
                        <fo:table-row role="TR" height="40pt">
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="#f7fafc"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">Peter</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="#f7fafc"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">Jones</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="#f7fafc"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    color="#3182ce"
                                    role="TD">
                                    <fo:inline role="TD">p.jones@foo.com</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                        </fo:table-row>

                        <!-- Benutzer 3: Sarah McNeil -->
                        <fo:table-row role="TR" height="40pt">
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">Sarah</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    role="TD">
                                    <fo:inline role="TD">McNeil</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                            
                            <fo:table-cell border="1pt solid #cbd5e0" 
                                padding="10pt 8pt" 
                                background-color="white"
                                display-align="center"
                                role="TD">
                                <fo:block text-align="left" 
                                    font-family="Montserrat"
                                    font-size="11pt"
                                    color="#3182ce"
                                    role="TD">
                                    <fo:inline role="TD">s.mcneil@foo.com</fo:inline>
                                </fo:block>
                            </fo:table-cell>
                        </fo:table-row>
                    </fo:table-body>
                </fo:table>

                <!-- Statistik-Bereich -->
                <fo:block margin-top="30pt" 
                    padding="15pt" 
                    background-color="#ebf8ff" 
                    border="2pt solid #63b3ed"
                    role="Sect">
                    
                    <fo:block font-family="Montserrat"
                        font-size="14pt" 
                        color="#2c5aa0"
                        margin-bottom="8pt"
                        role="H2">
                        <fo:inline role="H2">📊 Benutzerstatistik</fo:inline>
                    </fo:block>
                    
                    <fo:table table-layout="fixed" width="100%">
                        <fo:table-column column-width="50%"/>
                        <fo:table-column column-width="50%"/>
                        
                        <fo:table-body>
                            <fo:table-row>
                                <fo:table-cell padding="5pt">
                                    <fo:block font-family="Montserrat"
                                        font-size="11pt" role="P">
                                        <fo:inline role="P">
                                            <fo:inline font-family="Montserrat">Gesamtanzahl Benutzer:</fo:inline> 3
                                        </fo:inline>
                                    </fo:block>
                                </fo:table-cell>
                                
                                <fo:table-cell padding="5pt">
                                    <fo:block font-family="Montserrat"
                                        font-size="11pt" role="P">
                                        <fo:inline role="P">
                                            <fo:inline font-family="Montserrat">Domain:</fo:inline> foo.com
                                        </fo:inline>
                                    </fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                            
                            <fo:table-row>
                                <fo:table-cell padding="5pt">
                                    <fo:block font-family="Montserrat"
                                        font-size="11pt" role="P">
                                        <fo:inline role="P">
                                            <fo:inline font-family="Montserrat">Letzte Aktualisierung:</fo:inline> Heute
                                        </fo:inline>
                                    </fo:block>
                                </fo:table-cell>
                                
                                <fo:table-cell padding="5pt">
                                    <fo:block font-family="Montserrat"
                                        font-size="11pt" role="P">
                                        <fo:inline role="P">
                                            <fo:inline font-family="Montserrat">Status:</fo:inline> Aktiv
                                        </fo:inline>
                                    </fo:block>
                                </fo:table-cell>
                            </fo:table-row>
                        </fo:table-body>
                    </fo:table>
                </fo:block>

                <!-- Hinweise -->
                <fo:block margin-top="20pt" 
                    font-family="Montserrat"
                    font-size="9pt" 
                    color="#718096" 
                    text-align="justify"
                    role="P">
                    <fo:inline role="P">
                        <fo:inline font-family="Montserrat">Hinweis:</fo:inline> 
                        Dieses Dokument wurde automatisch generiert und entspricht dem PDF/UA-1 Standard 
                        für barrierefreie PDF-Dokumente. Alle Daten wurden zum Zeitpunkt der Erstellung 
                        aus dem aktuellen System übernommen.
                    </fo:inline>
                </fo:block>

                <!-- Unsichtbare Referenz für Seitenzahl -->
                <fo:block id="last-page" role="artifact"/>
            </fo:block>
        </fo:flow>
    </fo:page-sequence>
</fo:root>
